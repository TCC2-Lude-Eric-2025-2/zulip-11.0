name: SonarCloud Analysis

on:
  push:
    branches: ["11.0", "main"]
  pull_request:
    branches: ["11.0", "main"]
  workflow_dispatch:

concurrency:
  group: "${{ github.workflow }}-${{ github.head_ref || github.run_id }}"
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write
  security-events: write

jobs:
  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better analysis

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          # Install dependencies using the project's method
          ./tools/provision --no-dev || echo "Provision completed with warnings"
          pip install coverage pytest

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.15.1

      - name: Install dependencies
        run: pnpm install

      - name: Run tests with coverage (Backend)
        run: |
          # Create var directory if it doesn't exist
          mkdir -p var
          
          # Activate Zulip virtualenv to satisfy sanity_check
          echo "Activating Zulip venv..."
          source .venv/bin/activate
          python -V
          
          # Execute backend tests with coverage and XML report
          echo "Running backend tests with coverage..."
          ./tools/test-backend --coverage --xml-report || echo "Backend tests completed with some failures"
          
          # Verify XML coverage file was created
          if [ -f "var/coverage.xml" ]; then
            echo "✅ Backend coverage XML file created: var/coverage.xml"
            ls -la var/coverage.xml
          else
            echo "❌ Backend coverage XML file not found!"
            echo "Checking for alternative coverage files..."
            find . -name "*.xml" -path "*/coverage*" 2>/dev/null || echo "No XML coverage files found"
          fi
          
      - name: Run tests with coverage (Frontend)
        run: |
          # Create node-coverage directory if it doesn't exist
          mkdir -p var/node-coverage
          
          # Execute frontend tests with coverage
          echo "Running frontend tests with coverage..."
          ./tools/test-js-with-node --coverage || echo "Frontend tests completed with some failures"
          
          # Verify LCOV coverage file was created
          if [ -f "var/node-coverage/lcov.info" ]; then
            echo "✅ Frontend coverage LCOV file created: var/node-coverage/lcov.info"
            ls -la var/node-coverage/lcov.info
          else
            echo "❌ Frontend coverage LCOV file not found!"
            echo "Checking for alternative coverage files..."
            find . -name "lcov.info" 2>/dev/null || echo "No LCOV coverage files found"
          fi

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # The action expects SONAR_TOKEN; support either secret name
          SONAR_CLOUD_TOKEN: ${{ secrets.SONAR_CLOUD_TOKEN }}

      - name: Verify coverage files before SonarCloud scan
        if: always()
        run: |
          echo "=== Verificando arquivos de coverage ==="
          
          # Check backend coverage
          if [ -f "var/coverage.xml" ]; then
            echo "✅ Backend coverage XML: var/coverage.xml ($(wc -l < var/coverage.xml) lines)"
          else
            echo "❌ Backend coverage XML não encontrado"
          fi
          
          # Check frontend coverage
          if [ -f "var/node-coverage/lcov.info" ]; then
            echo "✅ Frontend coverage LCOV: var/node-coverage/lcov.info ($(wc -l < var/node-coverage/lcov.info) lines)"
          else
            echo "❌ Frontend coverage LCOV não encontrado"
          fi
          
          # List all coverage files
          echo "=== Arquivos de coverage encontrados ==="
          find var -name "*.xml" -o -name "*.info" -o -name "coverage*" | head -10

      - name: Comment PR with SonarCloud results
        if: github.event_name == 'pull_request'
        uses: sonarqube-quality-gate-action@v1.0.1
        with:
          scanMetadataReportFile: .scannerwork/report-task.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
