name: SonarCloud Analysis

on:
  push:
    branches: ["11.0", "main"]
  pull_request:
    branches: ["11.0", "main"]
  workflow_dispatch:

concurrency:
  group: "${{ github.workflow }}-${{ github.head_ref || github.run_id }}"
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write
  security-events: write

jobs:
  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required for SonarCloud full analysis

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip wheel setuptools
          echo "Running Zulip provisioning..."
          ./tools/provision --no-dev || echo "‚ö†Ô∏è Provision completed with warnings"

      - name: Detect and activate Zulip venv
        id: detect-venv
        run: |
          echo "üîç Searching for Zulip virtualenv..."
          # Detect either local or cached virtualenv path
          VENV_PATH=""
          if [ -d ".venv" ]; then
            VENV_PATH=".venv"
          else
            VENV_PATH=$(find /srv -type d -name "zulip-py3-venv" 2>/dev/null | head -n 1)
          fi

          if [ -z "$VENV_PATH" ]; then
            echo "‚ùå Could not locate Zulip virtualenv!"
            echo "Files under /srv:"
            ls -la /srv || true
            exit 1
          fi

          echo "‚úÖ Zulip virtualenv found at: $VENV_PATH"
          echo "VENV_PATH=$VENV_PATH" >> $GITHUB_ENV

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.15.1

      - name: Install frontend dependencies
        run: pnpm install

      - name: Run backend tests with coverage
        run: |
          mkdir -p var
          echo "Activating Zulip environment from $VENV_PATH..."
          source $VENV_PATH/bin/activate
          python -V
          
          echo "Running backend tests with coverage..."
          ./tools/test-backend --coverage --xml-report || echo "‚ö†Ô∏è Some backend tests failed"

          if [ -f "var/coverage.xml" ]; then
            echo "‚úÖ Found backend coverage report at var/coverage.xml"
          else
            echo "‚ùå Backend coverage.xml not found!"
            find var -type f -name "*.xml" || true
          fi

      - name: Run frontend tests with coverage
        run: |
          mkdir -p var/node-coverage
          echo "Running frontend tests with coverage..."
          ./tools/test-js-with-node --coverage || echo "‚ö†Ô∏è Some frontend tests failed"

          if [ -f "var/node-coverage/lcov.info" ]; then
            echo "‚úÖ Found frontend LCOV report at var/node-coverage/lcov.info"
          else
            echo "‚ùå Frontend lcov.info not found!"
            find var -type f -name "*.info" || true
          fi

      - name: Verify coverage files
        if: always()
        run: |
          echo "=== Verifying coverage artifacts ==="
          [ -f "var/coverage.xml" ] && echo "‚úÖ Backend coverage.xml exists"
          [ -f "var/node-coverage/lcov.info" ] && echo "‚úÖ Frontend lcov.info exists"
          echo "--- Listing files in var ---"
          find var -maxdepth 2 -type f | head -20

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_CLOUD_TOKEN }}

      - name: Comment PR with SonarCloud results
        if: github.event_name == 'pull_request'
        uses: sonarqube-quality-gate-action@v1.0.1
        with:
          scanMetadataReportFile: .scannerwork/report-task.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
